translation_unit: 
struct_specifier 
| function_definition
| translation_unit struct_specifier
| translation_unit function_definition

struct_specifier: 
STRUCT IDENTIFIER '{' declaration_list '}' ';'

function_definition: 
type_specifier fun_declarator compound_statement

type_specifier: 
VOID
| INT
| FLOAT
| STRUCT IDENTIFIER

fun_declarator: 
IDENTIFIER '(' parameter_list ')'
| IDENTIFIER '(' ')'

parameter_list: 
parameter_declaration
| parameter_list ',' parameter_declaration

parameter_declaration: 
type_specifier declarator

declarator_arr: 
IDENTIFIER
| declarator_arr '[' INT_CONSTANT ']'

declarator: 
declarator_arr
| '*' declarator

compound_statement: 
'{' '}'
| '{' statement_list '}'
| '{' declaration_list statement_list '}'

statement_list: 
statement
| statement_list statement

statement: 
';'
| '{' statement_list '}'
| selection_statement
| iteration_statement
| assignment_statement
| procedure_call
| RETURN expression ';'

assignment_expression: 
unary_expression '=' expression

assignment_statement: 
assignment_expression ';'

procedure_call: 
IDENTIFIER '(' ')' ';'
| IDENTIFIER '(' expression_list ')' ';'

expression: 
logical_and_expression
| expression OR_OP logical_and_expression

logical_and_expression: 
equality_expression
| logical_and_expression AND_OP equality_expression

equality_expression: 
relational_expression
| equality_expression EQ_OP relational_expression
| equality_expression NE_OP relational_expression

relational_expression: 
additive_expression
| relational_expression '<' additive_expression
| relational_expression '>' additive_expression
| relational_expression LE_OP additive_expression
| relational_expression GE_OP additive_expression

additive_expression: 
multiplicative_expression
| additive_expression '+' multiplicative_expression
| additive_expression '-' multiplicative_expression

unary_expression: 
postfix_expression
| unary_operator unary_expression

multiplicative_expression: 
unary_expression
| multiplicative_expression '*' unary_expression
| multiplicative_expression '/' unary_expression

postfix_expression: 
primary_expression
| postfix_expression '[' expression ']'
| IDENTIFIER '(' ')'
| IDENTIFIER '(' expression_list ')'
| postfix_expression '.' IDENTIFIER
| postfix_expression PTR_OP IDENTIFIER
| postfix_expression INC_OP // Allows x++++

primary_expression: 
IDENTIFIER
| INT_CONSTANT
| FLOAT_CONSTANT
| STRING_LITERAL
| '(' expression ')'

expression_list: 
expression
| expression_list ',' expression

unary_operator: 
'-'
| '!'
| '&'
| '*'

selection_statement: 
IF '(' expression ')' statement ELSE statement

iteration_statement: 
WHILE '(' expression ')' statement
| FOR '(' assignment_expression ';' expression ';' assignment_expression ')' statement

declaration_list: 
declaration
| declaration_list declaration

declaration: 
type_specifier declarator_list ';'

declarator_list: 
declarator
| declarator_list ',' declarator